{"version":3,"sources":["client/components/App/logo.svg","client/components/VideoStream/VideoStream.jsx","client/components/App/App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","__webpack_require__","p","VideoStream","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isConnected","isPlaying","protocol","window","location","hostname","handleConnectDisconnect","bind","assertThisInitialized","handlePlayStopClick","wsavc","WSAvcPlayer","canvas","disconnect","destroy","stopStream","setState","playStream","connect","concat","_this2","playStopText","connectDisconnectText","react_default","a","createElement","Card","Group","style","width","Content","textAlign","ref","hidden","margin","Placeholder","height","fluid","Image","rectangular","extra","Button","onClick","icon","labelPosition","marginLeft","Icon","name","toLowerCase","color","React","Component","App","className","src","logo","alt","components_VideoStream_VideoStream","Divider","Boolean","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa1fee63.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { WSAvcPlayer } from \"h264-live-player\";\nimport { Button, Icon, Placeholder, Card } from \"semantic-ui-react\";\n\nclass VideoStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isConnected: false, isPlaying: false };\n    this.protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    this.hostname = window.location.hostname;\n\n    this.handleConnectDisconnect = this.handleConnectDisconnect.bind(this);\n    this.handlePlayStopClick = this.handlePlayStopClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.wsavc = new WSAvcPlayer(this.canvas, \"webgl\");\n  }\n\n  componentWillUnmount() {\n    this.wsavc.disconnect();\n    this.wsavc.destroy();\n  }\n\n  handlePlayStopClick() {\n    if (this.state.isPlaying) {\n      this.wsavc.stopStream();\n      this.setState({ isPlaying: false });\n    } else {\n      this.wsavc.playStream();\n      this.setState({ isPlaying: true });\n    }\n  }\n\n  handleConnectDisconnect() {\n    if (this.state.isConnected) {\n      this.wsavc.disconnect();\n      this.setState({ isConnected: false, isPlaying: false });\n    } else {\n      this.wsavc.connect(`${this.protocol}//${this.hostname}:4242/video`);\n      this.setState({ isConnected: true, isPlaying: true });\n    }\n  }\n\n  render() {\n    const playStopText =\n      this.state.isConnected && this.state.isPlaying ? \"Stop\" : \"Play\";\n    const connectDisconnectText = this.state.isConnected\n      ? \"Disconnect\"\n      : \"Connect\";\n\n    return (\n      <div>\n        <Card.Group>\n          <Card style={{ width: 700 }}>\n            <Card.Content textAlign=\"center\">\n              <canvas\n                ref={canvas => (this.canvas = canvas)}\n                hidden={!this.state.isConnected}\n                style={{ margin: \"auto\" }}\n              />\n              <Placeholder\n                style={{ height: 360 }}\n                hidden={this.state.isConnected}\n                fluid\n              >\n                <Placeholder.Image rectangular />\n              </Placeholder>\n            </Card.Content>\n            <Card.Content textAlign=\"center\" extra>\n              <Button\n                onClick={this.handlePlayStopClick}\n                icon\n                labelPosition=\"left\"\n                style={{ marginLeft: \"1em\" }}\n              >\n                <Icon name={playStopText.toLowerCase()} />\n                {playStopText}\n              </Button>\n              <Button\n                onClick={this.handleConnectDisconnect}\n                icon\n                labelPosition=\"left\"\n                style={{ marginLeft: \"1em\" }}\n              >\n                <Icon\n                  name=\"plug\"\n                  color={connectDisconnectText === \"Connect\" ? \"green\" : \"red\"}\n                />\n                {connectDisconnectText}\n              </Button>\n            </Card.Content>\n          </Card>\n        </Card.Group>\n      </div>\n    );\n  }\n}\n\nexport default VideoStream;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport VideoStream from \"../VideoStream/VideoStream\";\nimport { Divider } from \"semantic-ui-react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <VideoStream />\n        <Divider />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './client/components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}